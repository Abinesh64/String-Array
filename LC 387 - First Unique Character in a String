Sol 1 : Using unordered_map:

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, int>m;
        for(int i=0;i<s.size();i++)  m[s[i]]=m[s[i]]+1;
        for(int j=0;j<s.size();j++)
        if(m[s[j]]==1) return j;
        return -1;
    }
};

Sol 2 : With O(n^2) time complexity 
class Solution {
public:
    int firstUniqChar(string s) {
        int count;
        for(int i=0;i<s.size();i++)
        {
            count=0;
            for(int j=0;j<s.size();j++)
            {
                if(s[i]==s[j]) count++;
                if(count>1) break;
            }
                if(count==1) return i;
        }
        return -1;
    }
};
